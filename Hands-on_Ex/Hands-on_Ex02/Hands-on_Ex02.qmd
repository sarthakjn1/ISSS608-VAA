---
title: "Hands-on Exercise 2"
author: "Sarthak Nagapurkar"
date: "April 17, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Getting Started

## **Installing and loading the required libraries**

```{r}
pacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)
```

## Importing the data

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              size=0.5) +
  geom_label(aes(label = ID),
             hjust = 0.5,
             vjust = -0.5) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) + 
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              size=0.5) +
  geom_label(aes(label = ID),
             hjust = 0.5,
             vjust = -0.5) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) + 
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## Working with ggrepel

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html)

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              size=0.5) +
  geom_label_repel(aes(label = ID),
             fontface="bold") + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) + 
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm,
              size=0.5) +
  geom_label_repel(aes(label = ID),
             fontface="bold") + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) + 
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

# Beyond ggplot2 Themes

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```
:::

## Working with ggtheme package

::: panel-tabset
## The plot

```{r}
#| echo: false
import_econ_sans()
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

## Working with hrbthemes package

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The code

```{r}
#| eval: false
ggplot(data = exam_data,
       aes(x = MATHS)) + 
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") + 
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

# Beyond Single Graph

First, let us create three statistical graphics by using the code chunk below.

::: panel-tabset
## The plot

```{r}
#| echo: false
p1 <- ggplot(data = exam_data,
             aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths Scores")
p1
```

## The code

```{r}
#| eval: false
p1 <- ggplot(data = exam_data,
             aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths Scores")
```
:::

Next

::: panel-tabset
## The plot

```{r}
#| echo: false
p2 <- ggplot(data = exam_data,
             aes(x = ENGLISH)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English Scores")
p2
```

## The code

```{r}
#| eval: false
p2 <- ggplot(data = exam_data,
             aes(x = ENGLISH)) +
  geom_histogram(bins = 20,
                 boundary = 100,
                 color = "grey25",
                 fill = "grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English Scores")
```
:::

Lastly, we will draw a scatterplot for English score versus Maths score by as shown below

::: panel-tabset
## The plot

```{r}
#| echo: false
p3 <- ggplot(data = exam_data,
             aes(x = MATHS,
                 y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English versus Maths scores for Primary 3")
p3
```

## The code

```{r}
#| eval: false
p3 <- ggplot(data = exam_data,
             aes(x = MATHS,
                 y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English versus Maths scores for Primary 3")
```
:::

## **Creating Composite Graphics: pathwork methods**

In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.
-   Parenthesis () to create a subplot group.
-   Two-Row Layout using the Division Sign `/`

## **Combining two ggplot2 graphs**

Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

::: panel-tabset
## The plot

```{r}
#| echo:  false
p1 + p2
```

## The code

```{r}
#| eval: false
p1 + p2
```
:::

## **Combining three ggplot2 graphs**

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   “/” operator to stack two ggplot2 graphs,
-   “\|” operator to place the plots beside each other,
-   “()” operator the define the sequence of the plotting.

::: panel-tabset
## The plot

```{r}
#| echo: false
(p1 / p2) | p3
```

## The code

```{r}
#| eval: false
(p1 / p2) | p3
```
:::

## **Creating a composite figure with tag**

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

::: panel-tabset
## The plot

```{r}
#| echo: false
((p1 / p2) | p3) +
  plot_annotation(tag_levels = 'I')
```

## The code

```{r}
#| eval: false
((p1 / p2) | p3) +
  plot_annotation(tag_levels = 'I')
```
:::

### **Creating figure with inset**

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## The plot

```{r}
#| echo: false
p3 + inset_element(p2,
                   left = 0.02,
                   bottom = 0.7,
                   right = 0.5,
                   top = 1)
```

## The code

```{r}
#| eval: false
p3 + inset_element(p2,
                   left = 0.02,
                   bottom = 0.7,
                   right = 0.5,
                   top = 1)
```
:::

## **Creating a composite figure by using patchwork and ggtheme**

Figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.

::: panel-tabset
## The plot

```{r}
#| echo: false
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

## The code

```{r}
#| eval: false
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::

# **Reference**

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)
-   [ggrepel](https://ggrepel.slowkow.com/)
-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)
-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)
-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)
-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)
-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)
