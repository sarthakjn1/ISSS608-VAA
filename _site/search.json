[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, we will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#learning-outcome",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to visualise and analyse text data using R.\nBy the end of this hands-on exercise, we will be able to:\n\nunderstand tidytext framework for processing, analysing and visualising text data,\nwrite function for importing multiple files into R,\ncombine multiple files into a single data frame,\nclean and wrangle text data by using tidyverse approach,\nvisualise words with Word Cloud,\ncompute term frequency–inverse document frequency (TF-IDF) using tidytext method, and\nvisualising texts and terms relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getting-started",
    "title": "Hands-on Exercise 5",
    "section": "29.2 Getting Started",
    "text": "29.2 Getting Started\n\n29.2.1 Installing and launching R packages\nIn this hands-on exercise, the following R packages for handling, processing, wrangling, analysing and visualising text data will be used:\n\ntidytext, tidyverse (mainly readr, purrr, stringr, ggplot2)\nwidyr,\nwordcloud and ggwordcloud,\ntextplot (required igraph, tidygraph and ggraph, )\nDT,\nlubridate and hms.\n\n\npacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms, tidyverse, tidygraph, ggraph, igraph)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders",
    "title": "Hands-on Exercise 5",
    "section": "29.3 Importing Multiple Text Files from Multiple Folders",
    "text": "29.3 Importing Multiple Text Files from Multiple Folders\n\n29.3.1 Creating a folder list\n\nnews20 &lt;- \"data/news20\"\n\n\n\n29.3.2 Define a function to read all files from a folder into a data frame\n\nread_folder &lt;- function(infolder) {\n  tibble(file = dir(infolder, \n                    full.names = TRUE)) %&gt;%\n    mutate(text = map(file, \n                      read_lines)) %&gt;%\n    transmute(id = basename(file), \n              text) %&gt;%\n    unnest(text)\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "This exercise aims to provide critique and improvements to visualizations created by peer in Take-home Exercise 1 using R. This will be done based on clarity and aesthetics. The original design will then be remade using data visualization design principles and best practices using ggplot2, its extensions, and tidyverse packages.\nThe original dataset consisted of transaction data of REALIS. A complete set of the private residential property transaction data of Singapore from 1st January 2023 to 31st March 2024 was used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "This exercise aims to provide critique and improvements to visualizations created by peer in Take-home Exercise 1 using R. This will be done based on clarity and aesthetics. The original design will then be remade using data visualization design principles and best practices using ggplot2, its extensions, and tidyverse packages.\nThe original dataset consisted of transaction data of REALIS. A complete set of the private residential property transaction data of Singapore from 1st January 2023 to 31st March 2024 was used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization-critique",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization-critique",
    "title": "Take-home Exercise 2",
    "section": "2. Data Visualization Critique",
    "text": "2. Data Visualization Critique\n\n2.1 Data Preparation\n\npacman::p_load(ggrepel, patchwork, ggthemes, ggridges, hrbrthemes, colorspace,ggdist, tidyr, tidyverse, htmltools, viridis)\n\n\nrealis_data_2023Q1 &lt;- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\nrealis_data_2023Q1 &lt;- mutate(realis_data_2023Q1, Quarter='2023-Q1')\nrealis_data_2023Q2 &lt;- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\nrealis_data_2023Q2 &lt;- mutate(realis_data_2023Q2, Quarter='2023-Q2')\nrealis_data_2023Q3 &lt;- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\nrealis_data_2023Q3 &lt;- mutate(realis_data_2023Q3, Quarter='2023-Q3')\nrealis_data_2023Q4 &lt;- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\nrealis_data_2023Q4 &lt;- mutate(realis_data_2023Q4, Quarter='2023-Q4')\nrealis_data_2024Q1 &lt;- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\nrealis_data_2024Q1 &lt;- mutate(realis_data_2024Q1, Quarter='2024-Q1')\ndf &lt;- rbind(realis_data_2023Q1, realis_data_2023Q2, realis_data_2023Q3, realis_data_2023Q4, realis_data_2024Q1)\n\ndf &lt;- df %&gt;%\n  mutate_if(is.character, as.factor)\n\n\ndf$`Sale Date` = as.Date(df$`Sale Date`, format = \"%d %b %Y\")\n\n\n\n2.2 Original Design\n\ndf %&gt;%\n  filter(`Number of Units` &gt; 1) %&gt;%\n  arrange(desc(`Number of Units`)) \n\n# A tibble: 12 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n   &lt;fct&gt;                                &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n 1 MEYER PARK                       392180000       144883.                 2707\n 2 BAGNALL COURT                    115280000        68491.                 1683\n 3 KEW LODGE                         66800000        25177                  2653\n 4 KARTAR APARTMENTS                 18000000         6964.                 2585\n 5 MONDO MANSION BUIL…                6280000         5490.                 1144\n 6 N.A.                              10600000         6747.                 1571\n 7 N.A.                              61080008        32149.                 1900\n 8 N.A.                              32200000        14123.                 2280\n 9 N.A.                               6150000         4342.                 1416\n10 EAST VIEW GARDEN                   6100000         8338.                  732\n11 N.A.                               8000000         3659.                 2187\n12 CLAYMORE PLAZA                     7000000         4209.                 1663\n# ℹ 18 more variables: `Sale Date` &lt;date&gt;, Address &lt;fct&gt;, `Type of Sale` &lt;fct&gt;,\n#   `Type of Area` &lt;fct&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;fct&gt;, `Property Type` &lt;fct&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;fct&gt;, `Completion Date` &lt;fct&gt;, `Purchaser Address Indicator` &lt;fct&gt;,\n#   `Postal Code` &lt;fct&gt;, `Postal District` &lt;fct&gt;, `Postal Sector` &lt;fct&gt;,\n#   `Planning Region` &lt;fct&gt;, `Planning Area` &lt;fct&gt;, Quarter &lt;fct&gt;\n\ndf.c &lt;- df %&gt;%\n  filter(!grepl('ENBLOC', df$Address))\ndf.c &lt;- df.c %&gt;%\n  filter(`Number of Units` &lt;= 1)\ndf.c_median &lt;- df.c %&gt;%\n  select(`Transacted Price ($)`, `Type of Area`, `Property Type`) %&gt;%\n  group_by(`Property Type`, `Type of Area`) %&gt;%\n  summarise(`Median Transaction Price ($)` = median(`Transacted Price ($)`, .groups = 'drop'))\n  ggplot(df.c_median, aes(x = `Property Type`, \n             y = `Median Transaction Price ($)`, \n             color = `Type of Area`)) +  # Adding color aesthetic based on Type of Area\n  geom_point() +\n  theme_economist() +\n  theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust=1)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(color = \"Type of Area\")\n\n\n\n\n\n\n\n\nThe link for the peers work: https://va24-ry.netlify.app/take-home%20exercise/take-home_ex01/take-home_ex01#identifying-the-sub-markets\n\n\n2.3 Critique: Clarity and Aesthetics\n\n2.2.1 Clarity\n\nLack of a title makes it difficult to understand what the plot is about.\nDot plot is being used to represent discrete data. The differences between prices are a bit difficult to understand as dot plots are not a very good way to represent discrete data.\nAs a person who wants to understand more from the data, he will be interested in knowing the distribution of data along with the median prices as well. Just the median prices would be insufficient to derive a conclusion about the larger dataset without knowing the distribution of data.\nLack of subtitle makes it difficult for the person viewing the visualization to understand the message the analyst wants to convey through the visualization. In turn, it makes it difficult to understand the analyst’s intention behind construction of the visualization\nLack of caption makes it hard to know about the source of the data.\n\n\n\n2.2.2 Aesthetics\n\nThe colour of dots for Strata matches closely with the background theme. This makes it slightly difficult to separate out.\nThe x axis labels are at 90 degrees to the usual view. This makes it uncomfortable for the reader to read the x-axis labels.\nY-axis gridlines make it easy to read the numbers.\nThe Type of Area has been placed at the top of the graph(in turn replacing the title). This is slightly misleading for the reader.\nA lighter colour could have been chosen for the background. This would have made the visualization stand out more clearly."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#makeover-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#makeover-design",
    "title": "Take-home Exercise 2",
    "section": "3. Makeover Design",
    "text": "3. Makeover Design\nThe intention behind the makover is to give a more detailed version of distribution of private property prices(based on property types) with area. This makeover adds in the distribution as well. This is because just the median prices won’t give the reader a complete view of the property prices. Also to derive any conclusion from the visualization, it is necessary to know the distribution of data.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncustom_palette &lt;- c(\"orange\", \"steelblue\")\np &lt;- ggplot(df.c_median, aes(x = `Property Type`, \n             y = `Median Transaction Price ($)`, \n             fill = `Type of Area`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.9) +\n  theme(axis.text.x = element_text(size = 9),\n        axis.text.y = element_text(size = 9),\n        axis.title.x = element_text(size = 12),\n        axis.title.y = element_text(size = 12),\n        plot.title = element_text(size = 25, face = \"bold\"),\n        plot.title = element_text(size = 18)) +\n scale_fill_manual(values = custom_palette) +\n  labs(color = \"Type of Area\", title = \"Sale Prices of Private Property types with Type of Area\",\n       subtitle = \"Higher prices for Properties on Land as compared to Strata\") + \n  scale_x_discrete(drop = FALSE)\n\ndf_terracehouse &lt;- df.c %&gt;% filter(`Property Type` == 'Terrace House')\np1 &lt;- ggplot(df_terracehouse, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Terrace Houses\",caption = \"Source: REALIS, URA\") + scale_fill_manual(values = custom_palette) +\n  ylim(0, 15000000) +\n  geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n\ndf_semidetached &lt;- df.c %&gt;% filter(`Property Type` == 'Semi-Detached House')\n\np2 &lt;- ggplot(df_semidetached, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Semi-Detached Houses\") + scale_fill_manual(values = custom_palette) +\n  ylim(0, 15000000) + geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n  \ndf_execcondo &lt;- df.c %&gt;% filter(`Property Type` == 'Executive Condominium')\n\np3 &lt;- ggplot(df_execcondo, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`,fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Executive Condominium\") + scale_fill_manual(values = \"steelblue\") +\n  ylim(0, 15000000) + geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") +\n  scale_x_discrete(drop = FALSE) +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n  \n  \ndf_detachedhouse &lt;- df.c %&gt;% filter(`Property Type` == 'Detached House')\n\np4 &lt;- ggplot(df_detachedhouse, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Detached house\") + scale_fill_manual(values = custom_palette) +\n  ylim(0, 15000000) + geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n\ndf_condo &lt;- df.c %&gt;% filter(`Property Type` == 'Condominium')\n\np5 &lt;- ggplot(df_condo, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Condominium\") + scale_fill_manual(values = \"steelblue\") +\n  ylim(0, 15000000) + geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") + \n  scale_x_discrete(drop = FALSE) +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n\ndf_apartment &lt;- df.c %&gt;% filter(`Property Type` == 'Apartment')\n\np6 &lt;- ggplot(df_apartment, \n             aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`)) + stat_halfeye(aes(justification = ifelse(`Type of Area` == \"Land\", 1.2, 0),\n               side = ifelse(`Type of Area` == \"Land\", \"left\", \"right\")),\n               adjust = 8,\n               .width = 0,\n               point_colour = NA, alpha = 0.9) +\n  labs(x = \"Apartment\") + scale_fill_manual(values = custom_palette) +\n  ylim(0, 15000000) + geom_boxplot(aes(x= `Type of Area`, y = `Transacted Price ($)`, fill = `Type of Area`),\n               outlier.shape = NA, \n               alpha = .5, \n               width = .2, \n               colour = \"black\") +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position=\"none\",\n    plot.title = element_text(size =12, face = \"bold\"),\n    plot.subtitle = element_text(size = rel(0.8)),\n    plot.caption = element_text(size = rel(0.8)),\n    axis.text.x = element_text(size = rel(0.9)),\n    axis.title.x = element_text(size = rel(0.9)),\n    axis.title.y = element_text(size = rel(1.2)),\n    axis.text.y = element_text(size = rel(0.9)),\n    \n    plot.background=element_rect(fill=\"white\",colour=\"white\"))\n\np7 &lt;- p / (p6 |  p5 | p4 | p3 | p2 | p1)\np7\n\n\n\n\n\n\n\n\n\n\nObservations from the Makeover Visualization\n\n\n\n\nIn general, the prices of properties on Land are higher than those on Strata for the same property type.\nThe differences between median sale prices of Terrace houses and Semi-detached houses is slightly lower than Apartments and Detached houses.\nThe detached houses and semi-detached houses have a higher variation in sale prices for Land Properties as compared to the Apartments and Terrace houses.\nThe median sale prices for Condos and Executive Condos are lower than the others."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "title": "Take-home Exercise 2",
    "section": "4. Learning Points",
    "text": "4. Learning Points\nThis take-home exercise adds a dimension of critique and makeover of peer works which helps to embed best practices in data visualization. The key takeaways are:\n\nIt is very important to pay attention to detail while critiquing a visualization. Aspects like the title, subtitle, captions, axes labels, legends, colour schemes play a very important role in getting an understanding of the visualiziation.\nTrying to understand the intention of the analyst behind constructing the visualization is of prime importance. As a reader, if the intention behind plotting the visualization is not understood then the reading and understanding of the visualization is incomplete."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-multiple-text-files-from-multiple-folders-1",
    "title": "Hands-on Exercise 5",
    "section": "29.4 Importing Multiple Text Files from Multiple Folders",
    "text": "29.4 Importing Multiple Text Files from Multiple Folders\n\n29.4.1 Reading in all the messages from the 20news folder\n\nraw_text &lt;- tibble(folder = \n                     dir(news20, \n                         full.names = TRUE)) %&gt;%\n  mutate(folder_out = map(folder, \n                          read_folder)) %&gt;%\n  unnest(cols = c(folder_out)) %&gt;%\n  transmute(newsgroup = basename(folder), \n            id, text)\nwrite_rds(raw_text, \"data/news20.rds\")\n\n\nnews20 &lt;- readRDS(\"data/news20.rds\")\n\n\n\n\n\n\n\nThings to learn from code chunk above:\n\n\n\n\nread_lines() of readr package is used to read up to n_max lines from a file.\nmap() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.\nunnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.\nmutate() of dplyr is used to add new variables and preserves existing ones;\ntransmute() of dplyr is used to add new variables and drops existing ones.\nread_rds() is used to save the extracted and combined data frame as rds file for future use."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#initial-eda",
    "title": "Hands-on Exercise 5",
    "section": "29.5 Initial EDA",
    "text": "29.5 Initial EDA\n\nraw_text &lt;- news20\nraw_text %&gt;%\n  group_by(newsgroup) %&gt;%\n  summarize(messages = n_distinct(id)) %&gt;%\n  ggplot(aes(messages, newsgroup)) +\n  geom_col(fill = \"lightblue\") +\n  labs(y = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#introducing-tidytext",
    "title": "Hands-on Exercise 5",
    "section": "29.6 Introducing tidytext",
    "text": "29.6 Introducing tidytext\n\nUsing tidy data principles in processing, analysing and visualising text data.\nMuch of the infrastructure needed for text mining with tidy data frames already exists in packages like ‘dplyr’, ‘broom’, ‘tidyr’, and ‘ggplot2’.\n\nFigure below shows the workflow using tidytext approach for processing and visualising text data.\n\n\n29.6.1 Removing header and automated email signitures\nNotice that each message has some structure and extra text that we don’t want to include in our analysis. For example, every message has a header, containing field such as “from:” or “in_reply_to:” that describe the message. Some also have automated email signatures, which occur after a line like “–”.\n\ncleaned_text &lt;- raw_text %&gt;%\n  group_by(newsgroup, id) %&gt;%\n  filter(cumsum(text == \"\") &gt; 0,\n         cumsum(str_detect(\n           text, \"^--\")) == 0) %&gt;%\n  ungroup()\n\n\n\n29.6.2 Removing lines with nested text representing quotes from other users.\nIn this code chunk below, regular expressions are used to remove with nested text representing quotes from other users.\n\ncleaned_text &lt;- cleaned_text %&gt;%\n  filter(str_detect(text, \"^[^&gt;]+[A-Za-z\\\\d]\")\n         | text == \"\",\n         !str_detect(text, \n                     \"writes(:|\\\\.\\\\.\\\\.)$\"),\n         !str_detect(text, \n                     \"^In article &lt;\")\n  )\n\n\n\n29.6.3 Text Data Processing\nIn this code chunk below, unnest_tokens() of tidytext package is used to split the dataset into tokens, while stop_words() is used to remove stop-words.\n\nusenet_words &lt;- cleaned_text %&gt;%\n  unnest_tokens(word, text) %&gt;%\n  filter(str_detect(word, \"[a-z']$\"),\n         !word %in% stop_words$word)\n\nNow that we’ve removed the headers, signatures, and formatting, we can start exploring common words. For starters, we could find the most common words in the entire dataset, or within particular newsgroups.\n\nusenet_words %&gt;%\n  count(word, sort = TRUE)\n\n# A tibble: 5,542 × 2\n   word           n\n   &lt;chr&gt;      &lt;int&gt;\n 1 people        57\n 2 time          50\n 3 jesus         47\n 4 god           44\n 5 message       40\n 6 br            27\n 7 bible         23\n 8 drive         23\n 9 homosexual    23\n10 read          22\n# ℹ 5,532 more rows\n\n\nInstead of counting individual word, you can also count words within by newsgroup by using the code chunk below.\n\nwords_by_newsgroup &lt;- usenet_words %&gt;%\n  count(newsgroup, word, sort = TRUE) %&gt;%\n  ungroup()\n\n\n\n29.6.4 Visualising Words in newsgroups\nIn this code chunk below, wordcloud() of wordcloud package is used to plot a static wordcloud.\n\nwordcloud(words_by_newsgroup$word,\n          words_by_newsgroup$n,\n          max.words = 300)\n\n\n\n\n\n\n\n\n\n\n29.6.5 Visualising Words in newsgroups\nThe wordcloud below is plotted by using ggwordcloud package.\n\nset.seed(1234)\n\nwords_by_newsgroup &lt;- words_by_newsgroup %&gt;% filter(n &gt; 0)\nggplot(words_by_newsgroup,aes(label = word,\n           size = n)) +\n  geom_text_wordcloud() +\n  theme_minimal() +\n  facet_wrap(~ newsgroup)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#basic-concept-of-tf-idf",
    "title": "Hands-on Exercise 5",
    "section": "29.7 Basic Concept of TF-IDF",
    "text": "29.7 Basic Concept of TF-IDF\n\ntf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.\n\n\n\n29.7.1 Computing tf-idf within newsgroups\nThe code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\n\ntf_idf &lt;- words_by_newsgroup %&gt;%\n  bind_tf_idf(word, newsgroup, n) %&gt;%\n  arrange(desc(tf_idf))\n\n\n\n29.7.2 Visualising tf-idf as interactive table\n\nDT::datatable(tf_idf, filter = 'top') %&gt;% \n  formatRound(columns = c('tf', 'idf', \n                          'tf_idf'), \n              digits = 3) %&gt;%\n  formatStyle(0, \n              target = 'row', \n              lineHeight='25%')"
  }
]