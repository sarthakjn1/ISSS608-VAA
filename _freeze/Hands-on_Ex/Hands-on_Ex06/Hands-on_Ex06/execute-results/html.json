{
  "hash": "cd1efc0271031eb6ec04be9a508d2d70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 6\"\nauthor: \"Sarthak Nagapurkar\"\ndate: \"May 17, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## 27.1 Overview\n\nIn this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\n\nBy the end of this hands-on exercise, you will be able to:\n\n-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,\n-   build network graph visualisation using appropriate functions of *ggraph*,\n-   compute network geometrics using *tidygraph*,\n-   build advanced graph visualisation by incorporating the network geometrics, and\n-   build interactive network visualisation using *visNetwork* package.\n\n## 27.2 Getting Started\n\n### 27.2.1 Installing and launching R packages\n\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and [lubridate](https://lubridate.tidyverse.org/), an R package specially designed to handle and wrangling time data will be installed and launched too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n```\n:::\n\n\n### 27.3.1 The edges data\n\n-   *GAStech-email_edges.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n### 27.3.2 The nodes data\n\n-   *GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.\n\n### 27.3.3 Importing network data from files\n\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using `read_csv()` of readr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n```\n:::\n\n\n### 27.3.4 Reviewing the imported data\n\nNext, we will examine the structure of the data frame using *glimpse()* of dplyr.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n```\n\n\n:::\n:::\n\n\n### 27.3.5 Wrangling time\n\nThe code chunk below will be used to perform the changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(WeekDay = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n```\n:::\n\n\n::: callout-tip\n## Things to learn from code chunk above:\n\n-   both *dmy()* and *wday()* are functions of lubridate package. [lubridate](https://r4va.netlify.app/cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html) is an R package that makes it easier to work with dates and times.\n-   *dmy()* transforms the SentDate to Date data type.\n-   *wday()* returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of *wday()* will save in this newly created field.\n-   the values in the *Weekday* field are in ordinal scale.\n:::\n\n### 27.3.6 Reviewing the revised date fields\n\nTable below shows the data structure of the reformatted *GAStech_edges* data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ WeekDay     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n```\n\n\n:::\n:::\n\n\n### 27.3.7 Wrangling attributes\n\nA close examination of *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\n\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, WeekDay) %>%\n  summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n```\n:::\n\n\n::: callout-tip\n## Things to learn from code chunk:\n\n-   four functions from dplyr package are used. They are: *filter()*, *group()*, *summarise()*, and *ungroup()*.\n-   The output data.frame is called GAStech_edges_aggregated.\n-   A new field called *Weight* has been added in GAStech_edges_aggregated.\n:::\n\n### 27.3.8 Reviewing the revised edges file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(GAStech_edges_aggregated) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ WeekDay <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n```\n\n\n:::\n:::\n\n\n## 27.4 Creating network objects using tidygraph\n\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\n\n### 27.4.1 The tbl_graph object\n\nTwo functions of tidygraph package can be used to create network objects, they are:\n\n-   [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) creates a tbl_graph network object from nodes and edges data.\n\n-   [`as_tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) converts network data and objects to a tbl_graph network. Below are network data and objects supported by `as_tbl_graph()`\n\n    -   a node data.frame and an edge data.frame,\n    -   data.frame, list, matrix from base,\n    -   igraph from igraph,\n    -   network from network,\n    -   dendrogram and hclust from stats,\n    -   Node from data.tree,\n    -   phylo and evonet from ape, and\n    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor)\n\n    ### 27.4.2 The dplyr verbs in tidygraph\n\n-   *activate()* verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n### 27.4.3 Using `tbl_graph()` to build tidygraph data model.\n\nIn this section, you will use `tbl_graph()` of tinygraph package to build an tidygraph’s network graph data.frame.\n\nBefore typing the codes, you are recommended to review to reference guide of [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated,\n                           directed = TRUE)\n```\n:::\n\n\n### 27.4.4 Reviewing the output tidygraph’s graph object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGAStech_graph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   <dbl> <chr>               <chr>          <chr>                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to WeekDay Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}