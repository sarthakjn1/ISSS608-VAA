{
  "hash": "fe674da02bcd3965953e0376511c7557",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3\"\nauthor: \"Sarthak Nagapurkar\"\ndate: \"May 22, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\nInstalling Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, ggraph,\n               visNetwork, graphlayouts, tidyverse, sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/MC2.json\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_ping <-\n  as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source =\n           as.character(source),\n         target=\n           as.character(target),\n         type = as.character(type),\n         time = as.character(time),\n         arrivaldate = as.character(as.Date(time, format = \"%Y-%m-%dT%H:%M:%S\"))\n  ) %>%\n  filter((source != target) & type == 'Event.TransportEvent.TransponderPing') %>%\n  select(source, target, type, time, dwell, arrivaldate)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_portstayping <-\n  as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source =\n           as.character(source),\n         target=\n           as.character(target),\n         type = as.character(type),\n         dwell = as.double(as.character(dwell)),\n        time = as.character(time),\n        arrivaldate = as.character(as.Date(time, format = \"%Y-%m-%dT%H:%M:%S\"))\n  ) %>%\n  mutate(month = substr(arrivaldate, 6 , 7)) %>%\n  group_by(source, target, type, month) %>%\n  #summarise(dwellmax = max(dwell)) %>%\n  filter((source != target) & (dwell == max(dwell))) %>%\n  select(source, target, type, dwell, time, arrivaldate, month)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_transaction <-\n  as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source =\n           as.character(source),\n         target=\n           as.character(target),\n         type = as.character(type),\n         date = as.character(date)\n  ) %>%\n  group_by(source, target, type) %>%\n  filter((source != target) & type == 'Event.Transaction') %>%\n  select(source, target, type, date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_harborreport <-\n  as_tibble(mc2_data$links) %>%\n  distinct() %>%\n  mutate(source =\n           as.character(source),\n         target=\n           as.character(target),\n         type = as.character(type),\n         date = as.character(date)\n  ) %>%\n  group_by(source, target, type) %>%\n  filter((source != target) & type == 'Event.HarborReport') %>%\n  select(source, target, type, date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  mutate(name = as.character(name),\n         id = as.character(id),\n         type = as.character(type),\n         date = as.character(as.Date(date)),\n         qty = as.character(as.double(qty_tons))) %>%\n  select(id, name, type, date, qty)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_deliveryreport <- mc2_nodes %>% filter(type == 'Entity.Document.DeliveryReport')\nmc2_fish <- mc2_nodes %>% filter(type == 'Entity.Commodity.Fish')\nmc2_loc <- mc2_nodes %>% filter(type == 'Entity.Location.City')\nmc2_cargovessels <- mc2_nodes %>% filter(type == 'Entity.Vessel.CargoVessel' |\n                                           type == 'Entity.Vessel.Ferry.Cargo')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_transaction_loc <- inner_join(mc2_loc, mc2_transaction, by = c(\"id\" = \"target\"))\nmc2_transaction_fish <- inner_join(mc2_fish, mc2_transaction, by = c(\"id\" = \"target\"))\nmc2_transaction_loc <- inner_join(mc2_transaction_fish, mc2_transaction_loc, by = c(\"source\" = \"source\"))\nmc2_transaction_loc <- inner_join(mc2_transaction_loc, mc2_deliveryreport, by = c(\"source\" = \"id\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_transaction_loc <- mc2_transaction_loc %>%\n  mutate(suspect_arrival = as.character(as.Date(date,format = \"%Y-%m-%d\") - 1),\n         suspect_arrival2 = as.character(as.Date(date,format = \"%Y-%m-%d\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_cargoping <- inner_join(mc2_ping, mc2_cargovessels, by = c(\"target\" = \"id\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_ping_transaction_loc <- right_join(mc2_cargoping, mc2_transaction_loc, by = c(\"source\" = \"id.y\", \"arrivaldate\" = \"suspect_arrival\"))\nmc2_ping_transaction_loc <- mc2_ping_transaction_loc %>% filter(dwell != 0.000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_ping_transaction_loc2 <- right_join(mc2_cargoping, mc2_transaction_loc, by = c(\"source\" = \"id.y\", \"arrivaldate\" = \"suspect_arrival2\"))\nmc2_ping_transaction_loc2 <- mc2_ping_transaction_loc2 %>% filter(dwell != 0.000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#finaljoin <- rbind(mc2_ping_transaction_loc, mc2_ping_transaction_loc2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(mc2_cargoping, 'ping.csv')\n#write.csv(finaljoin, 'transactionping.csv')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngeog <- st_read(\"data/Oceanus Geography.geojson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\sarthakjn1\\ISSS608-VAA\\Take-home_Ex\\Take-home_Ex03\\data\\Oceanus Geography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nstructure(geog)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                  Name                           Description\n1          Suna Island               Large island of Oceanus\n2     Thalassa Retreat             Smaller island of Oceanus\n3         Makara Shoal A small, generally unregulated island\n4     Silent Sanctuary       A small bird sea-bird sanctuary\n5            Cod Table                                      \n6       Ghoti Preserve                                      \n7          Wrasse Beds                                      \n8            Nemo Reef                                      \n9  Don Limpet Preserve                                      \n10          Tuna Shelf                                      \n                                          X.note                   type\n1         Suna is 'sand' or 'gritty' in Japanese Entity.Location.Region\n2                   Thalassa is 'ocean' in greek Entity.Location.Region\n3  'Makara' is a legendary sea guardian in Hindi Entity.Location.Region\n4                                           <NA> Entity.Location.Region\n5                                           <NA> Entity.Location.Region\n6                                           <NA> Entity.Location.Region\n7                                           <NA> Entity.Location.Region\n8                                           <NA> Entity.Location.Region\n9                                           <NA> Entity.Location.Region\n10                                          <NA> Entity.Location.Region\n                X.Kind                        Activities\n1               Island                       Residential\n2               Island                       Residential\n3               Island                        Recreation\n4               Island                 Tourism, Research\n5       Fishing Ground                Commercial fishing\n6  Ecological Preserve     Research, Tourism, Recreation\n7       Fishing Ground                Commercial fishing\n8  Ecological Preserve               Recreation, Tourism\n9  Ecological Preserve               Recreation, Tourism\n10      Fishing Ground Commercial fishing, Sport fishing\n                                                                                                   fish_species_present\n1                                                                                                                      \n2                                                                                                                      \n3                                                                                                                      \n4                                                                                                                      \n5                                              Cod/Gadus n.specificatae, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n6                        Wrasse/Labridae n.refert, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Offidiaa/Piscis osseus\n7                                              Wrasse/Labridae n.refert, Birdseye/Pisces frigus, Beauvoir/Habeas pisces\n8  Wrasse/Labridae n.refert, Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis\n9   Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Helenaa/Pisces satis, Sockfish/Pisces foetida\n10                         Tuna/Thunnini n.vera, Birdseye/Pisces frigus, Beauvoir/Habeas pisces, Harland/Piscis sapidum\n                         geometry\n1  MULTIPOLYGON (((-166.0111 3...\n2  MULTIPOLYGON (((-164.4052 3...\n3  MULTIPOLYGON (((-165.0429 4...\n4  MULTIPOLYGON (((-164.8069 3...\n5  MULTIPOLYGON (((-164.1321 3...\n6  MULTIPOLYGON (((-164.4198 3...\n7  MULTIPOLYGON (((-165.3874 3...\n8  MULTIPOLYGON (((-165.2935 3...\n9  MULTIPOLYGON (((-165.9767 3...\n10 MULTIPOLYGON (((-165.4815 3...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = geog) +\n  geom_sf(color = \"darkblue\") +\n  geom_sf_text(aes(label = Name, fill = type), size = 5, color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Region Plot with Labels\", x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}