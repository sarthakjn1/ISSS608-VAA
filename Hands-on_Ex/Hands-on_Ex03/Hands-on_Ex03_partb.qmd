---
title: "Hands-on Exercise 3: Part B"
author: "Sarthak Nagapurkar"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## **4.1 Overview**

In this hands-on exercise, we will learn how to create animated data visualisation by using **gganimate** and **plotly r** packages. At the same time, we will also (i) reshape data by using **tidyr** package, and (ii) process, wrangle and transform data by using **dplyr** package.

### **4.1.1 Basic concepts of animation**

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](images/clipboard-2255747727.png)

### **4.1.2 Terminology**

Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.
2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

## **4.2 Getting Started**

### **4.2.1 Loading the R packages**

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

### **4.2.2 Importing the data**

In this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.

The code below imports Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

## **4.3 Animated Data Visualisation: gganimate methods**

[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.
-   `view_*()` defines how the positional scales should change along the animation.
-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.
-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.
-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### **4.3.1 Building a static population bubble plot**

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.

```{r}
ggplot(globalPop,
       aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### **4.3.2 Building the animated bubble plot**

In the code chunk below,

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year).
-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop,
       aes(x = Old, y = Young,
           size = Population, colour = Country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values= country_colors) +
  scale_size(range = c(2,12)) +
  labs(title = 'Year:{frame_time}',
       x = '% Aged',
       y = '% Young') +
  transition_time(Year) +
  ease_aes('linear')
```

## **4.4 Animated Data Visualisation: plotly**

In **Plotly R** package, both `ggplotly()` and `plot_ly()` support key frame animations through the `frame` argument/aesthetic. They also support an `ids` argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### **4.4.1 Building an animated bubble plot: `ggplotly()` method**

In this sub-section, you will learn how to create an animated bubble plot by using `ggplotly()` method.

::: panel-tabset
## The plot

```{r}
#| echo: false
gg <- ggplot(globalPop,
             aes(x = Old, y = Young,
                 size = Population,
                 colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

## The code

```{r}
#| eval: false
gg <- ggplot(globalPop,
             aes(x = Old, y = Young,
                 size = Population,
                 colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2,12)) +
  labs(x = '% Aged', 
       y = '% Young')
ggplotly(gg)
```
:::

::: panel-tabset
## The plot

```{r}
#| echo: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

## The code

```{r}
#| eval: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```
:::

### **4.4.2 Building an animated bubble plot: `plot_ly()` method**

In this sub-section, you will learn how to create an animated bubble plot by using `plot_ly()` method.

::: panel-tabset
## The plot

```{r}
#| echo: false
bp <- globalPop %>%
  plot_ly(x = ~Old,
          y = ~Young,
          size = ~Population,
          color = ~Continent,
          sizes = c(2,100),
          frame = ~Year,
          text = ~Country,
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers') %>%
          layout(show.legend = FALSE)
bp
```

## The code

```{r}
#| eval: false
bp <- globalPop %>%
  plot_ly(x = ~Old,
          y = ~Young,
          size = ~Population,
          color = ~Continent,
          sizes = c(2,100),
          frame = ~Year,
          text = ~Country,
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers') %>%
          layout(show.legend = FALSE)
bp
```
:::

## **4.5 Reference**

-   [Getting Started](https://gganimate.com/articles/gganimate.html)
-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).
-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
